# -*- coding: utf-8 -*-
"""Transformer_framework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FXNm5PsFWxOze1FBZi0j7mE2NAnG0xvk
"""

import tensorflow as tf
from tensorflow.keras.layers import *
import numpy as np
import pandas as pd
import re
import tensorflow_datasets as tfds

import matplotlib.pyplot as plt

def preprocess_sentence(sentence):
    sentence = sentence.lower().strip()
    # creating a space between a word and the punctuation following it
    # eg: "he is a boy." => "he is a boy ."
    sentence = re.sub(r"([?.!,])", r" \1 ", sentence)
    # Get rid of unnecessary space
    sentecne = re.sub(r'[" "]+', " ", sentence)
    # replacing everything with space except (a-z, A-Z, ".", "?", "!", ",")
    sentence = re.sub(r"[^a-zA-Z?.,!]+", " ", sentence)
    sentence = sentence.strip()
    # adding a start and an end token to the sentence
    return sentence

def scaled_dot_product_attention(query, key, value, mask):
    """Calculate the attention weights."""
    matmul_qk = tf.matmul(query, key, transpose_b = True)
    
    # scale matmul_qk
    depth = tf.cast(tf.shape(key)[-1], tf.float32)
    logits = matmul_qk / tf.math.sqrt(depth)
    
    # add the mask to zero out padding tokens
    if mask is not None:
        logits += (mask * -1e9)
        
    #sofmax is normalized on the last axis (seq_len_k)
    attention_weights = tf.nn.softmax(logits, axis = -1)
    
    output = tf.matmul(attention_weights, value)
    
    return output

class MultiHeadAttention(tf.keras.layers.Layer):

  def __init__(self, d_model, num_heads, name="multi_head_attention"):
    super().__init__()
    self.num_heads = num_heads
    self.d_model = d_model

    assert d_model % self.num_heads == 0

    self.depth = d_model // self.num_heads

    self.query_dense = tf.keras.layers.Dense(units=d_model)
    self.key_dense = tf.keras.layers.Dense(units=d_model)
    self.value_dense = tf.keras.layers.Dense(units=d_model)

    self.dense = tf.keras.layers.Dense(units=d_model)

  def split_heads(self, inputs, batch_size):
    inputs = tf.reshape(
        inputs, shape=(batch_size, -1, self.num_heads, self.depth))
    return tf.transpose(inputs, perm=[0, 2, 1, 3])

  def call(self, inputs):
    query, key, value, mask = inputs['query'], inputs['key'], inputs['value'], inputs['mask']
    batch_size = tf.shape(query)[0]

    # linear layers
    query = self.query_dense(query)
    key = self.key_dense(key)
    value = self.value_dense(value)


    # split heads
    query = self.split_heads(query, batch_size)
    key = self.split_heads(key, batch_size)
    value = self.split_heads(value, batch_size)

    # scaled dot-product attention
    scaled_attention = scaled_dot_product_attention(query, key, value, mask)

    scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])

    # concatenation of heads
    concat_attention = tf.reshape(scaled_attention,
                                  (batch_size, -1, self.d_model))

    # final linear layer
    outputs = self.dense(concat_attention)

    return outputs

def create_padding_mask(x):
    # tf.math.equal returns the truth value of (x == y) element-wise
    mask = tf.cast(tf.math.equal(x, 0), tf.float32)
    # (batch_size, 1, 1, sequence length)
    return mask[:, tf.newaxis, tf.newaxis, :]

def create_look_ahead_mask(x):
    seq_len = tf.shape(x)[1]
    look_ahead_mask = 1- tf.linalg.band_part(tf.ones((seq_len, seq_len)), -1, 0)
    padding_mask = create_padding_mask(x)
    # tf.maximum returns the max of x and y (i.e. x>y?x:y) element-wise
    return tf.maximum(look_ahead_mask, padding_mask)

class PositionalEncoding(tf.keras.layers.Layer):
    
    def __init__(self, position, d_model):
        super().__init__()
        self.pos_encoding = self.positional_encoding(position, d_model)
        
    def get_angles(self, position, i, d_model):
        angles = 1 / tf.pow(10000,(2 * (i // 2)) / tf.cast(d_model, tf.float32))
        return position * angles
    
    def positional_encoding(self, position, d_model):
        angle_rads = self.get_angles(position = tf.range(position, dtype=tf.float32)[:, tf.newaxis], i=tf.range(d_model, dtype=tf.float32)[tf.newaxis, :], d_model = d_model)
        # apply sin to even index in the array
        sines = tf.math.sin(angle_rads[:, 1::2])
        # apply cos to odd index in the array
        cosines = tf.math.cos(angle_rads[:, 1::2])
        
        # negative axis refers to axis + rank(values)-th dimension.
        pos_encoding = tf.concat([sines, cosines], axis = -1)
        pos_encoding = pos_encoding[tf.newaxis, ...]
        return tf.cast(pos_encoding, tf.float32)
    
    def call(self, inputs):
        return inputs + self.pos_encoding[:, :tf.shape(inputs)[1], :]

class EncoderLayer(tf.keras.layers.Layer):

  def __init__(self, units, d_model, num_heads, dropout, name="encoder_layer"):
      super().__init__()
      self.units=units
      self.d_model=d_model
      self.num_heads=num_heads
      self.dropout=dropout
      self.attention = MultiHeadAttention(d_model=self.d_model, num_heads=self.num_heads, name="multi_head_attention")
      self.dropout_layer=Dropout(self.dropout)
      self.layer_normalization1=LayerNormalization(epsilon=1e-6)
      self.dense1=Dense(self.units, activation='relu')
      self.dense2=Dense(self.d_model)
      self.layer_normalization2=LayerNormalization(epsilon=1e-6)


  def call(self, input, padding_mask):
      '''
      input has to be in the form of a dictionary
      input={
          'query': inputs,
          'key': inputs,
          'value': inputs,
          'mask': padding_mask
      }   

      '''
      att_input={'query':input,'key':input,'value':input, 'mask':padding_mask}

      attention_output=self.attention(att_input)
      attention_output=self.dropout_layer(attention_output)
      attention_output=self.layer_normalization1(input+attention_output)
      output=self.dense1(attention_output)
      output=self.dense2(output)
      output=self.dropout_layer(output)
      output=self.layer_normalization2(output+attention_output)

      return output

class Encoder(tf.keras.layers.Layer):
    def __init__(self, vocab_size,num_layers,units, d_model, num_heads, dropout, name='encoder'):
       super().__init__()
       self.vocab_size=vocab_size
       self.units=units
       self.num_layers=num_layers
       self.d_model=d_model
       self.num_heads=num_heads
       self.dropout=dropout
       #self.position=position
       self.embedding=Embedding(input_dim=self.vocab_size,output_dim=self.d_model)
       self.positional_encoding=PositionalEncoding(position=self.vocab_size, d_model=self.d_model)
       self.dropout_layer=Dropout(self.dropout)
       self.enc_layers = [EncoderLayer(units=self.units, d_model=self.d_model, num_heads=self.num_heads, dropout=self.dropout, name="encoder_layer_{}".format(i))  for i in range(self.num_layers)]
      

    def call(self,input, padding_mask):
      embedd_output=self.embedding(input)
      embedd_output *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))
      embeddings=self.positional_encoding(embedd_output)
      outputs=self.dropout_layer(embeddings)

      for i in range(self.num_layers):
            outputs = self.enc_layers[i](outputs, padding_mask)
      return outputs

class DecoderLayer(tf.keras.layers.Layer):
  def __init__(self, units, d_model, num_heads,dropout, name = "decoder_layer"):
      super().__init__()
      self.units=units
      self.d_model=d_model
      self.num_heads=num_heads
      self.dropout=dropout
      self.attention1 = MultiHeadAttention(d_model=self.d_model, num_heads=self.num_heads, name="attention_1")
      self.attention2 = MultiHeadAttention(d_model=self.d_model, num_heads=self.num_heads, name="attention_2")
      self.layernorm1=LayerNormalization(epsilon=1e-6)
      self.layernorm2 = LayerNormalization(epsilon=1e-6)
      self.layernorm3 = LayerNormalization(epsilon=1e-6)
      self.dropout1 = Dropout(self.dropout)
      self.dropout2 = Dropout(self.dropout)
      self.dropout3 = Dropout(self.dropout)
      self.dense1 = Dense(self.units, activation='relu')
      self.dense2 = Dense(self.d_model)
  
  def __call__(self,inputs,encoder_outputs,look_ahead_mask, padding_mask):
      att_input={'query':inputs, 'key': inputs, 'value': inputs, 'mask':look_ahead_mask}
      attention_1=self.attention1(att_input)
      attention_1=self.dropout1(attention_1)
      attention_1=self.layernorm1(attention_1+inputs)
  
      att_input2={'query':attention_1,'key':encoder_outputs, 'value':encoder_outputs,'mask':padding_mask}
      attention_2=self.attention2(att_input2)
      
      attention_2=self.dropout2(attention_2)
      attention_2=self.layernorm2(attention_1+attention_2)
      output=self.dense1(attention_2)
      output=self.dense2(output)
      output=self.dropout3(output)
      output=self.layernorm3(output+attention_2)
      return output

class Decoder(tf.keras.layers.Layer):
      def __init__(self,vocab_size, num_layers,units,d_model,num_heads, dropout,name='decoder'):
           super().__init__()
           self.vocab_size=vocab_size
           self.num_layers=num_layers
           self.units=units
           self.d_model=d_model
           self.num_heads=num_heads
           self.dropout=dropout
           self.embedding=Embedding(input_dim=self.vocab_size, output_dim=self.d_model)
           self.positional_embedding=PositionalEncoding(self.vocab_size, self.d_model)
           self.dropout_layer=Dropout(self.dropout)
           self.dec_layers = [DecoderLayer(units=self.units, d_model=self.d_model, num_heads=self.num_heads, dropout=self.dropout, name="decoder_layer_{}".format(i))  for i in range(self.num_layers)]

      def call(self, inputs, encoder_outputs, look_ahead_mask, padding_mask):
           embeddings=self.embedding(inputs)
           embeddings *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))
           embeddings = self.positional_embedding(embeddings)
           output=self.dropout_layer(embeddings)
           for i in range(self.num_layers):
               output=self.dec_layers[i](output, encoder_outputs, look_ahead_mask, padding_mask)

           return output

class Transformer(tf.keras.Model):
      def __init__(self,vocab_size,num_layers,units, d_model, num_heads, dropout):
          super().__init__()
          self.vocab_size = vocab_size
          self.num_layers = num_layers
          self.units = units
          self.d_model = d_model
          self.num_heads = num_heads
          self.dropout = dropout
          self.enc_padding_mask=Lambda(create_padding_mask, output_shape=(1, 1, None),name="enc_padding_mask")
          self.dec_padding_mask=Lambda(create_padding_mask, output_shape=(1, 1, None),name="dec_padding_mask")
          self.look_ahead_mask=Lambda(create_look_ahead_mask,output_shape=(1, None, None),name = "look_ahead_mask")
          self.encoder = Encoder(vocab_size=self.vocab_size, num_layers=self.num_layers, units=self.units, d_model=self.d_model, num_heads=self.num_heads, dropout=self.dropout, name='encoder')
          self.decoder = Decoder(vocab_size=self.vocab_size, num_layers=self.num_layers, units=self.units, d_model=self.d_model, num_heads=self.num_heads, dropout=self.dropout, name='decoder')
          self.dense1 = Dense(units=self.vocab_size, name="outputs")

      def call(self, data):
         
          encoder_input = data[0]
          decoder_input=data[1]
          enc_padding_mask=self.enc_padding_mask(encoder_input)
      
          dec_input_look_ahead_mask=self.look_ahead_mask(decoder_input)
          enc_output=self.encoder(encoder_input,enc_padding_mask)
          decoder_padding_mask=self.dec_padding_mask(encoder_input)

          dec_output=self.decoder(decoder_input, enc_output, dec_input_look_ahead_mask, decoder_padding_mask)
          outputs = self.dense1(dec_output)
          return outputs

import pickle 
with open('tokenizer.pkl', 'rb') as handle:
    tokenizer = pickle.load(handle)

START_TOKEN, END_TOKEN = [tokenizer.vocab_size], [tokenizer.vocab_size + 1]
MAX_LENGTH=23

def evaluate(sentence,model):
    sentence = preprocess_sentence(sentence)
    
    sentence = tf.expand_dims(START_TOKEN + tokenizer.encode(sentence) + END_TOKEN, axis = 0)
    
    output = tf.expand_dims(START_TOKEN, 0)

    #output = tf.expand_dims(START_TOKEN, 0)
    for i in range(MAX_LENGTH):
        enc_padding_mask = model.layers[0](sentence)
        dec_input_look_ahead_mask=model.layers[2](output)
        enc_output=model.layers[3](sentence,enc_padding_mask)
        decoder_padding_mask=model.layers[1](sentence)
        dec_output=model.layers[4](output, enc_output, dec_input_look_ahead_mask, decoder_padding_mask)
        predictions=model.layers[5](dec_output)

        
        # select the last word from the seq_len dimension
        predictions = predictions[:, -1:, :]
        predicted_id = tf.cast(tf.argmax(predictions, axis=-1), tf.int32)
        
        # return the result if the predicted_id is equal to the end token
        if tf.equal(predicted_id, END_TOKEN[0]):
            break
            
        # concatenated the predicted_id to the output which is given to the decoder at its input.
        output = tf.concat([output, predicted_id], axis=-1)
        
    return tf.squeeze(output, axis = 0)

def predict(sentence,model):
    prediction = evaluate(sentence,model)
    
    predicted_sentence = tokenizer.decode([i for i in prediction if i < tokenizer.vocab_size])
    
    #print('Input: {}'.format(sentence))
    #print('Output: {}'.format(predicted_sentence))
    
    return predicted_sentence





















